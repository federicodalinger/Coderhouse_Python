1. Voy a la carpeta raiz que tiene todos mis proyectos individuales (chequear estar en raiz de proyectos con terminal).

2. Tengo que generar un nuevo proyecto, en donde voy a ir a colocar luego mis aplicaciones:
    2.1. django-admin startproject ProyectoCoder
    2.2. Se va a generar la carpeta "ProyectoCoder" con una carpeta interna tambien llamada "ProyectoCoder". Hasta aca es igual que antes.

3. Luego accedo a dicha carpeta de "ProyectoCoder", nueva, creada recien:
    3.1. cd ./ProyectoCoder

4. Alli vamos a crear la app que nos interese:
    4.1. python manage.py startapp AppCoder
    4.2. Se va a generar una subcarpeta "AppCoder" dentro de la carpeta principal "ProyectoCoder".

5. Para comunicarme con la base de datos, por "sqlite", se va a trabajar con objetos, que van a ser generados por los modelos.

6. Vamos a la subcarpeta "AppCoder" y ahi dentro de "models.py" colocamos todos los modelos necesarios.

7. Ahora, al generar una app nueva, le tenemos que avisar al proyecto (ProyectoCoder) que la considere.
    7.1. Entro a la subcarpeta "ProyectoCoder", entro en "settings.py" y ahi voy a "INSTALLED_APPS".
    7.2. Agrego "AppCoder" (sin olvidar que tiene que llevar las comillas al final). Django es asi... (tiene aspecto de lista pero no lo es)
    7.3. Ahora podriamos chequear si la app se esta considerando sin problemas, con:
        7.3.1. python manage.py check AppCoder

8. Los objetos que fueron generadas por los modelos de "models.py" ahora deben ser usados para crear "las tablas para la base de datos":
    8.1. Primero se van a crear las tablas con los modelos antes definidos, en "models.py":
    8.2. python manage.py makemigrations
    8.3. (en la consola se va a ver que se crean las tablas y modelos nuevos). 
    8.3. Ahora movemos tales archivos nuevos (tablas) a la base de datos:
    8.3. python manage.py migrate 

9. En caso de requerir modificar alguna de las clases, de los modelos en "models.py", posteriormente debo repetir 8.2 y 8.3.
    9.1. Si hubiese generado y cargado, por ejemplo, varios alumnos sin "DNI", y luego modifico la "class Estudiantes (models.Model)":
    9.2. Django avisa del error y me consulta de cargar los DNI previos, faltantes con numero random o segun el que prefiera. 

10. La base datos va estar trabajando con el motor de base de datos, SQLite:
    10.1. Es un motor chiquito, que administra la base de datos y es usado por Django.
    10.2. Para verla, vamos a usar DB Browser:
        10.2.1. sqlitebrowser.org

11. En DB Browser:
    11.1. Busco y abro el archivo "db.sqlite3"
    11.2. Voy a ver las tablas generadas ("AppCoder_curso", "AppCoder_entregable", "AppCoder_estudiantes", "AppCoder_profesor")
    11.3. Puedo abrir alguna de ellas (click secundario, Browse Table), y ahi mismo modificandolas (con su "id", "nombre" y "comision"). Igualmente no es lo mas correcto.
    11.4. En este caso solo voy a guardar info. Si quiero modificar la estructura, voy a Django y hago los pasos del punto 9.
    11.5. La idea es que esa base de datos sea modificada por el usuario, desde el Front End.
    11.6. Si quiero anular la base de datos, y que empiece desde id=1, voy a la pestaÃ±a "Execute SQL" y escribo:
        11.6.1. delete from MVT_DALINGER_App_familiar;  
        11.6.2. delete from sqlite_sequence where name='MVT_DALINGER_App_familiar';
        11.6.3. selecciono todo y ejecuto.

12. Para practicar un poco, vamos a ver como modificar la base de datos, desde una consola de python:
    12.1. Genero y ejecuto primero la consola de python
        12.1.1. python manage.py shell  
        12.1.2. Voy a ver como tengo ">>>" en la linea de comandos y ademas, el nombre de la consola/terminal, ver a la derecha, ahora se llama "python"
    12.2. Ahora puedo meter codigo de python en la consola "python":
        12.2.1. Importamos la clase/metodo "Estudiantes":
        12.2.2. from AppCoder.models import Estudiantes
        12.2.3. Agregamos un nuevo estudiante a la base de datos:
        12.2.4. estudiante = Estudiantes (nombre = "fede", apellido = "dalinger", email = "fededalinger@gmail.com")  #ojo que aca la funcion recibe 3 parametros
            12.2.4.1. El "id" es un incremental, seria raro que lo pidiese.
        12.2.5. Tal nuevo estudiante, se almacena en la "memoria", pero puedo luego guardarlo en la base de datos:
        12.2.6. estudiante.save()
    12.3. Para salir de la consola de python:
        12.3.1. exit()
        12.3.1.2. ademas vemos como el nombre de la consola deja de llamarse "python" y vuelve a llamarse "powershell".

13. Ya que la base de datos funciona, modificada por consola de python, vamos a generar una "view", dentro la AppCoder, que haga esto mismo:
    13.1. Definimos la funcion constructora "curso". En este caso estamos haciendo un CRUD (create read update delete).
    13.2. Vamos a "url.py" del ProyectoCoder y agregamos el path de la vista generada.
    13.3. Corremos de nuevo el servidor (ojo, recordar que tengo que estar en el directorio de ProyectoCoder):
        13.3.1. python manage.py runserver
    13.4. Si ahora vamos a http://127.0.0.1:8000/curso/ dentro del navegador, vamos a ir ejecutando la funcion constructora "curso", que va ir generando cada uno de los objetos "curso", y ademas, almacenandolos en la base de datos.
    13.5. Luego en DB Browser podemos ir viendo los objetos "curso" creados dentro de la tabla "AppCoder_curso", de mi base de datos.
    13.6. Hasta ahora solo generamos info y la mostramos en la web. Ademas, los guardamos en la base de datos pero hasta ahora no sacamos info de ella.

14. Extra, subir a github el ProyectoCoder:
    14.1. cd ./ProyectoCoder 
    14.2. git init
    14.3. "git add ."    #las comillas no se ponen, es para aclarar que debe ponerse el punto, para incluir todos los cambios
    14.4. git commit -m "fin clase 18, del proyecto ProyectoCoder"
    14.5. Voy a Github.com:
        14.5.1. Creo nuevo repositorio:
            14.5.1.1. En "Repository name" ponemos ProyectoCoder.
            14.5.1.2. Agregamos una descripcion del mismo.
            14.5.1.3. Revisar que tenga caracter publico / privado.
            14.5.1.4. Creamos el repositorio.
        14.5.2. Copio el link del repositorio creado
    14.6. git remote add origin "link del repositorio copiado"
    14.7. git push origin main
        14.7.1. En caso de dar fallo, probar con --> git push origin master
        14.7.2. En caso de querer cambiarlo --> git remote set-url origin https://github.com/federicodalinger/MVT_Dalinger
        14.7.3. En caso de querer forzar una subida: git push -f origin master (With the -f tag you will override the remote branch code with your local repo code.)
    14.8  LINK REPOSITORIO DESAFIO ENTREGABLE "https://github.com/federicodalinger/MVT_Dalinger.git"

15. Git (modificaciones):
    15.1. We can easily create an alias for those "unadd" and "unstage" commands:
        15.1.1. git config --global alias.unadd 'reset HEAD --'
        15.1.2.git config --global alias.unstage 'reset HEAD --'